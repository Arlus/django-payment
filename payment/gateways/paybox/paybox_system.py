import base64
import binascii
import hashlib
import hmac
from urllib.parse import parse_qs, urlparse

import requests
from Crypto.Hash import SHA
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
from django.conf import settings
from django.utils.datetime_safe import datetime

from payment.gateways.paybox.forms import PaymentSystemAuthorizeForm, PaymentSystemCaptureForm


class PayboxSystemClient:
    """A Paybox System transaction, from your server to the customer's browser, and from Paybox server to yours
    Attributes:
        MANDATORY   The values nedded to call for a payment
        ACCESSORY   The values you may add to modify Paybox behavior
        RESPONSE_CODES  Every response code Paybox may return after a payment attempt
    """

    def __init__(
            self,
            total=None,
            porteur=None,
            devise=None,
            public_key=None,
            site=None,
            rang=None,
            identifiant=None,
            production=False,
            transaction_confirmation_url=None,
            transaction_valid_url=None,
            transaction_rejection_url=None,
            transaction_cancel_url=None,
            ipn_url=None,
            language=None
    ):
        self.production = production
        self.refuse = transaction_rejection_url
        self.effectue = transaction_valid_url
        self.annule = transaction_cancel_url
        self.attente = transaction_confirmation_url
        self.repondre_a = ipn_url
        self.production = production
        self.operation_type = ""

        if self.production:
            self.action_url = "https://tpeweb.e-transactions.fr/php/"
            self.KEY = public_key
        else:
            self.action_url = "https://preprod-tpeweb.e-transactions.fr/php/"
            self.KEY = public_key

        self.REQUIRED = {
            "PBX_SITE": site,  # SITE NUMBER (given by Paybox)
            "PBX_RANG": rang,  # RANG NUMBER (given by Paybox)
            "PBX_IDENTIFIANT": identifiant,  # IDENTIFIANT NUMBER (given by Paybox)
            "PBX_TOTAL": total,  # Total amount of the transaction, in cents
            "PBX_DEVISE": devise if devise else "978",  # Currency of the transaction
            "PBX_CMD": "",  # Transaction reference generated by the ecommerce
            "PBX_PORTEUR": porteur,  # Customer's email address
            "PBX_RETOUR": "total:M;reference:R;response_code:E;cc_first:N;cc_last:J;time:Q;auth_code:A;sign:K",  # List of the variables Paybox must return to the IPN url
            "PBX_HASH": "SHA512",  # Hash algorithm used to calculate the Hmac value
            "PBX_TIME": datetime.utcnow().isoformat(),  # Time of the transaction (iso 8601 format)
        }

        self.OPTIONAL = {
            "PBX_REFUSE": self.refuse,  # url de retour en cas de refus de paiement
            "PBX_REPONDRE_A": self.repondre_a,  # url IPN. WARNING. With Trailing slash, otherwise Django 301 to it...
            "PBX_EFFECTUE": self.effectue,  # url de retour en cas de succes
            "PBX_ANNULE": self.annule,  # url de retour en cas d'abandon
            "PBX_ATTENTE": self.attente,  # url de retour en cas d'abandon
            "PBX_LANGUE": language or "GBR",  # 3 Chars. payment language. GBR for English
        }

        self.RESPONSE_CODES = {
            "00000": "Success",
            "00001": "Connection failed. Make a new attempt at tpeweb1.paybox.com",
            "001xx": "Payment rejected",
            "00003": "Paybox Error. Make a new attempt at tpeweb1.paybox.com",
            "00004": "Card Number invalid",
            "00006": "site, rang, or identifiant invalid. Connection rejected",
            "00008": "Card Expiration Date invalid",
            "00009": "Error while creating a subscription",
            "00010": "Unrecognized currency",
            "00011": "Incorrect amount",
            "00015": "Payment already done",
            "00016": "Subscriber already known",
            "00021": "Unauthorized Card",
            "00029": "Incorrect Card Number",
            "00030": "Time Out",
            "00031": "Reserved",
            "00032": "Reserved",
            "00033": "Country Not Supported",
            "00040": "3DSecure validation failed",
            "99999": "Payment on Hold",
        }

    def endpoint_url(self):
        if self.production:
            main_url = "https://tpeweb.paybox.com/cgi/MYchoix_pagepaiement.cgi"
            backup_url = "https://tpeweb1.paybox.com/cgi/MYchoix_pagepaiement.cgi"
            request = requests.get(main_url)
            if request.status_code == 200:
                return main_url
            else:
                request = requests.get(backup_url)
                if request.status_code == 200:
                    return backup_url
        else:
            return "https://preprod-tpeweb.paybox.com/cgi/MYchoix_pagepaiement.cgi"

    def post_to_paybox(self, operation_type="", amount="", currency="", email="", cmd=None):
        """
        Returns the Paybox action url, required request variables, and the
        optional variables
        :return: {
                    "action": self.action_url,
                    "required": self.required,
                    "optional": self.optional,
                }
        """
        self.REQUIRED["PBX_TOTAL"] = amount
        self.REQUIRED["PBX_DEVISE"] = currency
        self.REQUIRED["PBX_CMD"] = cmd
        self.REQUIRED["PBX_PORTEUR"] = email
        if operation_type == "Authorization":
            self.OPTIONAL["PBX_AUTOSEULE"] = 'O'
            self.operation_type = "Authorization"
        elif operation_type == "Capture":
            self.operation_type = "Capture"
        # string to sign. Made of the Mandatory variables in a precise order.
        tosign = (
                "PBX_SITE=%(PBX_SITE)s&PBX_RANG=%(PBX_RANG)s&PBX_IDENTIFIANT=%(PBX_IDENTIFIANT)s&PBX_TOTAL=%(PBX_TOTAL)s&PBX_DEVISE=%(PBX_DEVISE)s&PBX_CMD=%(PBX_CMD)s&PBX_PORTEUR=%(PBX_PORTEUR)s&PBX_RETOUR=%(PBX_RETOUR)s&PBX_HASH=%(PBX_HASH)s&PBX_TIME=%(PBX_TIME)s"
                % self.REQUIRED
        )
        # Optional variables
        for key, value in self.OPTIONAL.items():
            if value:
                tosign += "&" + key + "=" + value

        binary_key = binascii.unhexlify(self.KEY)
        signature = (
            hmac.new(binary_key, tosign.encode("ascii"), hashlib.sha512)
                .hexdigest()
                .upper()
        )
        self.REQUIRED["PBX_HMAC"] = signature

        return {
            "action": self.endpoint_url(),
            "required": self.REQUIRED,
            "optional": self.OPTIONAL,
        }

    def construct_form(self):
        """ Returns an html form ready to be used (string)
        """
        data = {**self.REQUIRED, **self.OPTIONAL}
        form = None
        if self.operation_type == "Capture":
            form = PaymentSystemCaptureForm(
                initial=data
            )
        elif self.operation_type == "Authorization":
            form = PaymentSystemAuthorizeForm(
                initial=data
            )

        return form

    def construct_html_form(self):
        """ Returns an html form ready to be used (string)
        """
        tosign = (
                "PBX_SITE=%(PBX_SITE)s&PBX_RANG=%(PBX_RANG)s&PBX_IDENTIFIANT=%(PBX_IDENTIFIANT)s&PBX_TOTAL=%(PBX_TOTAL)s&PBX_DEVISE=%(PBX_DEVISE)s&PBX_CMD=%(PBX_CMD)s&PBX_PORTEUR=%(PBX_PORTEUR)s&PBX_RETOUR=%(PBX_RETOUR)s&PBX_HASH=%(PBX_HASH)s&PBX_TIME=%(PBX_TIME)s"
                % self.REQUIRED
        )
        # for the accessory variables, the order is not important
        for name, value in self.OPTIONAL.items():
            if value:
                tosign += "&" + name + "=" + value
        binary_key = binascii.unhexlify(self.KEY)
        signature = (
            hmac.new(binary_key, tosign.encode("ascii"), hashlib.sha512)
                .hexdigest()
                .upper()
        )
        self.REQUIRED["hmac"] = signature

        optional_fields = "\n".join(
            [
                "<input type='hidden' name='{0}' value='{1}'>".format(
                    field, self.OPTIONAL[field]
                )
                for field in self.OPTIONAL
                if self.OPTIONAL[field]
            ]
        )

        html = """<form method=POST action="{action}">
            <input type="hidden" name="PBX_SITE" value="{required[PBX_SITE]}">
            <input type="hidden" name="PBX_RANG" value="{required[PBX_RANG]}">
            <input type="hidden" name="PBX_IDENTIFIANT" value="{required[PBX_IDENTIFIANT]}">
            <input type="hidden" name="PBX_TOTAL" value="{required[PBX_TOTAL]}">
            <input type="hidden" name="PBX_DEVISE" value="{required[PBX_DEVISE]}">
            <input type="hidden" name="PBX_CMD" value="{required[PBX_CMD]}">
            <input type="hidden" name="PBX_PORTEUR" value="{required[PBX_PORTEUR]}">
            <input type="hidden" name="PBX_RETOUR" value="{required[PBX_RETOUR]}">
            <input type="hidden" name="PBX_HASH" value="{required[PBX_HASH]}">
            <input type="hidden" name="PBX_TIME" value="{required[PBX_TIME]}">
            <input type="hidden" name="PBX_HMAC" value="{required[hmac]}">
            {optional}
            <input type="submit" value="Pay">
        </form>"""

        return html.format(
            action=self.endpoint_url(), required=self.REQUIRED, optional=optional_fields
        )

    def verify_ipn(self, response_url, total, verify_certificate=True):
        """ Verifies the notification sent by Paybox to your server.
        It verifies :
            - the authenticity of the message
            - the fact that the message has not been altered
            - if not in production, the auth_number must be "XXXXXX"
            - if in production, there must be a Response Code
            - the total returned must be equal to the total of the order you've saved in ddb
        :response_url: (string), the full response url with its encoded args
        :order_total': (int), the total amount required
        :verify_certificate: (bool)
        It returns a dict which contains three variables:
            - success, (bool) True if the payment is valid
            - status, (str) The Paybox Response Code
            - auth_code, (str) The Authorization Code generated by the Authorization Center
        """

        url_parsed = urlparse(response_url)
        message = url_parsed.query
        query = parse_qs(message)

        if verify_certificate:
            self.verify_certificate(message=message, signature=query["sign"][0])

        if not self.production:
            assert query["auth_code"][0] == "XXXXXX", "Incorrect Test Authorization Code"
        else:
            assert "response_code" in query, "No Response Code Returned"

        assert query["total"][0] == str(
            total
        ), "Total does not match. PBX: %s - CMD: %s" % (
            query["total"][0],
            str(total),
        )

        return {
            "success": True if query["response_code"][0] == "00000" else False,
            "status": self.RESPONSE_CODES.get(
                query["response_code"][0][:-2] + "xx",
                self.RESPONSE_CODES.get(query["response_code"][0], "Unrecognized Response Code"),
            ),
            "auth_code": query["auth_code"][0] if "auth_code" in query else False,
        }

    def verify_certificate(self, message, signature):
        """ Verifies the Paybox certificate, authenticity and alteration.
        If everything goes well, returns True. Otherwise raise an Error
        :message: (str), the full url with its args
        :signature: (str), the signature of the message, separated from the url
        Flow:
            - The signature is decoded base64
            - The signature is removed from the message
            - The Paybox pubkey is loaded from an external file
            - it's validity is checked
            - The message is digested by SHA1
            - The SHA1 message is verified against the binary signature
        """

        # detach the signature from the message
        message_without_sign = message.split("&sign=")[0]
        # decode base64 the signature
        binary_signature = base64.b64decode(signature)
        # create a pubkey object
        if self.production:
            key = RSA.importKey(
                settings.PAYBOX_PUBLIC_KEY
            )
        else:
            key = RSA.importKey(
                settings.PAYBOX_TEST_PUBLIC_KEY
            )
        # digest the message
        h = SHA.new(bytes(message_without_sign, encoding="utf8"))
        # and verify the signature
        verifier = PKCS1_v1_5.new(key)
        assert verifier.verify(h, binary_signature), "Signature Verification Failed"

        return True
